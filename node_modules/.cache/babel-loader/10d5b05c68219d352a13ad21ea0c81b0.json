{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\"; // n.b. base case is not used for actual typings or exported in the typing files\n\nexport function observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function (props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n\n  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,OAAjC;AAEA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAmCA;;AACA,OAAM,SAAUC,QAAV,CACFC,aADE,EAEFC,OAFE,EAEwB;AAE1B;AACA,MAAIJ,sBAAsB,EAA1B,EAA8B;AAC1B,WAAOG,aAAP;AACH;;AAED,MAAME,WAAW;AACbP,cAAU,EAAE;AADC,KAEVM,OAFU,CAAjB;;AAKA,MAAME,iBAAiB,GAAGH,aAAa,CAACI,WAAd,IAA6BJ,aAAa,CAACK,IAArE;;AAEA,MAAMC,gBAAgB,GAAG,UAACC,KAAD,EAAWC,GAAX,EAA+B;AACpD,WAAOV,WAAW,CAAC;AAAM,0BAAa,CAACS,KAAD,EAAQC,GAAR,CAAb;AAAyB,KAAhC,EAAkCL,iBAAlC,CAAlB;AACH,GAFD;;AAGAG,kBAAgB,CAACF,WAAjB,GAA+BD,iBAA/B,CAjB0B,CAmB1B;AACA;AACA;;AACA,MAAIM,aAAJ;;AACA,MAAIP,WAAW,CAACP,UAAhB,EAA4B;AACxB;AACA;AACA;AACA;AACAc,iBAAa,GAAGb,IAAI,CAACD,UAAU,CAACW,gBAAD,CAAX,CAApB;AACH,GAND,MAMO;AACHG,iBAAa,GAAGb,IAAI,CAACU,gBAAD,CAApB;AACH;;AAEDI,sBAAoB,CAACV,aAAD,EAAgBS,aAAhB,CAApB;AACAA,eAAa,CAACL,WAAd,GAA4BD,iBAA5B;AAEA,SAAOM,aAAP;AACH,C,CAED;;AACA,IAAME,cAAc,GAAQ;AACxBC,UAAQ,EAAE,IADc;AAExBC,QAAM,EAAE,IAFgB;AAGxBC,SAAO,EAAE,IAHe;AAIxBC,MAAI,EAAE;AAJkB,CAA5B;;AAOA,SAASL,oBAAT,CAA8BM,IAA9B,EAAyCC,MAAzC,EAAoD;AAChDC,QAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,OAAlB,CAA0B,eAAG;AACzB,QAAI,CAACT,cAAc,CAACU,GAAD,CAAnB,EAA0B;AACtBH,YAAM,CAACI,cAAP,CAAsBL,MAAtB,EAA8BI,GAA9B,EAAmCH,MAAM,CAACK,wBAAP,CAAgCP,IAAhC,EAAsCK,GAAtC,CAAnC;AACH;AACJ,GAJD;AAKH","names":["forwardRef","memo","isUsingStaticRendering","useObserver","observer","baseComponent","options","realOptions","baseComponentName","displayName","name","wrappedComponent","props","ref","memoComponent","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","Object","keys","forEach","key","defineProperty","getOwnPropertyDescriptor"],"sources":["E:\\Mono-projekt\\node_modules\\mobx-react-lite\\src\\observer.ts"],"sourcesContent":["import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P> | React.FunctionComponent<P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}
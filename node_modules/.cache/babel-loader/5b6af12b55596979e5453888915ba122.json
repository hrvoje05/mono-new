{"ast":null,"code":"import _ from \"lodash\";\n\nclass ApiServices {\n  constructor(baseUrl) {\n    this.url = baseUrl;\n  }\n\n  async fetchData() {\n    let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      page: null,\n      rpp: null,\n      searchQuery: null,\n      sort: null\n    };\n    let newUrl = this.url;\n    let hasFirstParam = false;\n\n    _.forEach(queryParams, function (value, key) {\n      if (!hasFirstParam) {\n        if (value !== null) {\n          let firstFilter = \"?\" + key + \"=\" + value + \"&\";\n          newUrl = newUrl + firstFilter;\n          hasFirstParam = true;\n        }\n      }\n\n      if (value !== null) {\n        let secondaryFilter = key + \"=\" + value + \"&\";\n        newUrl = newUrl + secondaryFilter;\n      }\n    });\n\n    let pendingData = await fetch(newUrl.slice(0, -1));\n    let fetchedData = await pendingData.json();\n    return fetchedData.item;\n  }\n\n  async fetchNumOfRecords(searchQuery) {\n    let newUrl = this.url;\n\n    if (searchQuery) {\n      newUrl = newUrl + `?searchQuery=${searchQuery}`;\n    }\n\n    let pendingData = await fetch(newUrl);\n    let fetchedData = await pendingData.json();\n    return fetchedData.totalRecords;\n  }\n\n  addNewResource(data) {\n    fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  deleteExistingResource(_ref) {\n    let {\n      id\n    } = _ref;\n    fetch(this.url + `/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`\n      }\n    }).catch(err => console.log(err));\n  }\n\n  updateExistingResource(_ref2) {\n    let {\n      id,\n      data\n    } = _ref2;\n    fetch(this.url + `/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`\n      },\n      body: JSON.stringify(data)\n    }).catch(err => console.log(err));\n  }\n\n}\n\nexport default ApiServices;","map":{"version":3,"sources":["E:/Mono-projekt/src/Services/ApiServices.js"],"names":["_","ApiServices","constructor","baseUrl","url","fetchData","queryParams","page","rpp","searchQuery","sort","newUrl","hasFirstParam","forEach","value","key","firstFilter","secondaryFilter","pendingData","fetch","slice","fetchedData","json","item","fetchNumOfRecords","totalRecords","addNewResource","data","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","deleteExistingResource","id","catch","err","console","log","updateExistingResource"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nclass ApiServices {\n  constructor(baseUrl) {\n    this.url = baseUrl;\n  }\n  async fetchData(\n    queryParams = { page: null, rpp: null, searchQuery: null, sort: null }\n  ) {\n    let newUrl = this.url;\n    let hasFirstParam = false;\n    _.forEach(queryParams, function (value, key) {\n      if (!hasFirstParam) {\n        if (value !== null) {\n          let firstFilter = \"?\" + key + \"=\" + value + \"&\";\n          newUrl = newUrl + firstFilter;\n          hasFirstParam = true;\n        }\n      }\n      if (value !== null) {\n        let secondaryFilter = key + \"=\" + value + \"&\";\n        newUrl = newUrl + secondaryFilter;\n      }\n    });\n    let pendingData = await fetch(newUrl.slice(0, -1));\n    let fetchedData = await pendingData.json();\n    return fetchedData.item;\n  }\n  async fetchNumOfRecords(searchQuery) {\n    let newUrl = this.url;\n    if (searchQuery) {\n      newUrl = newUrl + `?searchQuery=${searchQuery}`;\n    }\n    let pendingData = await fetch(newUrl);\n    let fetchedData = await pendingData.json();\n    return fetchedData.totalRecords;\n  }\n  addNewResource(data) {\n    fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n      },\n      body: JSON.stringify(data),\n    });\n  }\n  deleteExistingResource({ id }) {\n    fetch(this.url + `/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n      },\n    }).catch((err) => console.log(err));\n  }\n  updateExistingResource({ id, data }) {\n    fetch(this.url + `/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n      },\n      body: JSON.stringify(data),\n    }).catch((err) => console.log(err));\n  }\n}\n\nexport default ApiServices;\n"]},"metadata":{},"sourceType":"module"}
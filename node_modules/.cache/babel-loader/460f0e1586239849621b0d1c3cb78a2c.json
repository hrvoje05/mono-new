{"ast":null,"code":"import _ from \"lodash\";\nimport { action, makeObservable, observable, runInAction } from \"mobx\";\n\nclass TableStore {\n  constructor() {\n    this.data = [];\n    this.totalPages = 0;\n    this.pagesArray = [];\n    this.displayPages = [];\n    this.displayPagesLimit = 5;\n    this.tableParams = {};\n    this.clickedDocument = {};\n    this.doubleClickedDocument = {};\n    this.filter = \"\";\n    makeObservable(this, {\n      data: observable,\n      filter: observable,\n      totalPages: observable,\n      pagesArray: observable,\n      tableParams: observable,\n      displayPages: observable,\n      displayPagesLimit: observable,\n      clickedDocument: observable,\n      doubleClickedDocument: observable,\n      getData: action,\n      getPages: action,\n      setCurrentPage: action,\n      setDisplayPages: action,\n      setSortOrder: action,\n      setTableFilter: action\n    });\n    this.sortOrder = \"asc\";\n    this.sortBy = \"\";\n    this.tableParams = {\n      page: 1,\n      rpp: 10,\n      searchQuery: null,\n      sort: null\n    };\n  }\n\n  async getData() {\n    let fetchedData = await this.services.fetchData(this.tableParams);\n    runInAction(() => {\n      this.data = fetchedData;\n    });\n  }\n\n  async getPages() {\n    let numOfDocs = await this.services.fetchNumOfRecords(this.tableParams.searchQuery);\n    this.totalPages = Math.ceil(numOfDocs / this.tableParams.rpp); //Create array of numbers up to number of total pages excluding 0, for display in UI\n\n    runInAction(() => {\n      this.pagesArray = [...Array(this.totalPages + 1).keys()].slice(1);\n      this.displayPages = [];\n\n      for (let i = 0; i < this.pagesArray.length; i++) {\n        if (this.displayPages.length < this.displayPagesLimit) {\n          this.displayPages.push(this.pagesArray[i]);\n        }\n      }\n    });\n  }\n\n  setCurrentPage(pageNumber) {\n    if (this.totalPages !== 0) {\n      if (pageNumber < 1) {\n        pageNumber = 1;\n      } else if (pageNumber > this.totalPages) {\n        pageNumber = this.totalPages;\n      }\n\n      this.tableParams.page = pageNumber;\n      this.setDisplayPages();\n      this.getData();\n    } else {\n      return null;\n    }\n  }\n\n  setDisplayPages() {\n    if (this.tableParams.page === this.displayPages[1]) {\n      if (this.tableParams.page !== 2) {\n        this.displayPages.unshift(this.displayPages[0] - 1);\n        this.displayPages.pop();\n      }\n\n      return null;\n    } else if (this.tableParams.page === this.displayPages[this.displayPages.length - 2]) {\n      if (this.displayPages[this.displayPages.length - 1] !== this.totalPages) {\n        this.displayPages.push(this.displayPages[this.displayPages.length - 1] + 1);\n        this.displayPages.shift();\n      }\n    } else if (this.tableParams.page === this.totalPages) {\n      this.displayPages = _.takeRight(this.pagesArray, 5);\n    } else if (this.tableParams.page === 1) {\n      this.displayPages = _.take(this.pagesArray, 5);\n    }\n  }\n\n  setSortOrder(newSortBy) {\n    if (this.sortBy !== newSortBy) {\n      this.sortOrder = \"asc\";\n    } else {\n      if (this.sortOrder === \"asc\") {\n        this.sortOrder = \"desc\";\n      } else this.sortOrder = \"asc\";\n    }\n  }\n\n  setTableFilter(text) {\n    //Ignore special characters, accept only Letters,Numbers and White space\n    let checkedText = text.replace(/[^a-zA-Z0-9\\s]+/g, \"\");\n    let trimmedText = checkedText.trim();\n\n    if (trimmedText === \"\") {\n      if (text === \"\") {\n        this.tableParams.page = 1;\n        this.tableParams.searchQuery = null;\n        this.getData();\n        this.getPages();\n        this.setDisplayPages();\n      } else {\n        return null;\n      }\n    } else {\n      this.tableParams.page = 1;\n      this.tableParams.searchQuery = trimmedText;\n      this.getData();\n      this.getPages();\n      this.setDisplayPages();\n    }\n  }\n\n}\n\nexport default TableStore;","map":{"version":3,"sources":["E:/Mono-projekt/src/Store/Main Stores/TableStore.js"],"names":["_","action","makeObservable","observable","runInAction","TableStore","constructor","data","totalPages","pagesArray","displayPages","displayPagesLimit","tableParams","clickedDocument","doubleClickedDocument","filter","getData","getPages","setCurrentPage","setDisplayPages","setSortOrder","setTableFilter","sortOrder","sortBy","page","rpp","searchQuery","sort","fetchedData","services","fetchData","numOfDocs","fetchNumOfRecords","Math","ceil","Array","keys","slice","i","length","push","pageNumber","unshift","pop","shift","takeRight","take","newSortBy","text","checkedText","replace","trimmedText","trim"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { action, makeObservable, observable, runInAction } from \"mobx\";\n\nclass TableStore {\n  data = [];\n  totalPages = 0;\n  pagesArray = [];\n  displayPages = [];\n  displayPagesLimit = 5;\n  tableParams = {};\n  clickedDocument = {};\n  doubleClickedDocument = {};\n  filter = \"\";\n  constructor() {\n    makeObservable(this, {\n      data: observable,\n      filter: observable,\n      totalPages: observable,\n      pagesArray: observable,\n      tableParams: observable,\n      displayPages: observable,\n      displayPagesLimit: observable,\n      clickedDocument: observable,\n      doubleClickedDocument: observable,\n      getData: action,\n      getPages: action,\n      setCurrentPage: action,\n      setDisplayPages: action,\n      setSortOrder: action,\n      setTableFilter: action,\n    });\n    this.sortOrder = \"asc\";\n    this.sortBy = \"\";\n    this.tableParams = {\n      page: 1,\n      rpp: 10,\n      searchQuery: null,\n      sort: null,\n    };\n  }\n  async getData() {\n    let fetchedData = await this.services.fetchData(this.tableParams);\n    runInAction(() => {\n      this.data = fetchedData;\n    });\n  }\n  async getPages() {\n    let numOfDocs = await this.services.fetchNumOfRecords(\n      this.tableParams.searchQuery\n    );\n    this.totalPages = Math.ceil(numOfDocs / this.tableParams.rpp);\n    //Create array of numbers up to number of total pages excluding 0, for display in UI\n    runInAction(() => {\n      this.pagesArray = [...Array(this.totalPages + 1).keys()].slice(1);\n      this.displayPages = [];\n      for (let i = 0; i < this.pagesArray.length; i++) {\n        if (this.displayPages.length < this.displayPagesLimit) {\n          this.displayPages.push(this.pagesArray[i]);\n        }\n      }\n    });\n  }\n  setCurrentPage(pageNumber) {\n    if (this.totalPages !== 0) {\n      if (pageNumber < 1) {\n        pageNumber = 1;\n      } else if (pageNumber > this.totalPages) {\n        pageNumber = this.totalPages;\n      }\n      this.tableParams.page = pageNumber;\n      this.setDisplayPages();\n      this.getData();\n    } else {\n      return null;\n    }\n  }\n  setDisplayPages() {\n    if (this.tableParams.page === this.displayPages[1]) {\n      if (this.tableParams.page !== 2) {\n        this.displayPages.unshift(this.displayPages[0] - 1);\n        this.displayPages.pop();\n      }\n      return null;\n    } else if (\n      this.tableParams.page === this.displayPages[this.displayPages.length - 2]\n    ) {\n      if (this.displayPages[this.displayPages.length - 1] !== this.totalPages) {\n        this.displayPages.push(\n          this.displayPages[this.displayPages.length - 1] + 1\n        );\n        this.displayPages.shift();\n      }\n    } else if (this.tableParams.page === this.totalPages) {\n      this.displayPages = _.takeRight(this.pagesArray, 5);\n    } else if (this.tableParams.page === 1) {\n      this.displayPages = _.take(this.pagesArray, 5);\n    }\n  }\n  setSortOrder(newSortBy) {\n    if (this.sortBy !== newSortBy) {\n      this.sortOrder = \"asc\";\n    } else {\n      if (this.sortOrder === \"asc\") {\n        this.sortOrder = \"desc\";\n      } else this.sortOrder = \"asc\";\n    }\n  }\n  setTableFilter(text) {\n    //Ignore special characters, accept only Letters,Numbers and White space\n    let checkedText = text.replace(/[^a-zA-Z0-9\\s]+/g, \"\");\n    let trimmedText = checkedText.trim();\n    if (trimmedText === \"\") {\n      if (text === \"\") {\n        this.tableParams.page = 1;\n        this.tableParams.searchQuery = null;\n        this.getData();\n        this.getPages();\n        this.setDisplayPages();\n      } else {\n        return null;\n      }\n    } else {\n      this.tableParams.page = 1;\n      this.tableParams.searchQuery = trimmedText;\n      this.getData();\n      this.getPages();\n      this.setDisplayPages();\n    }\n  }\n}\n\nexport default TableStore;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { makeObservable, observable, action } from \"mobx\";\n\nclass FormStore {\n  constructor() {\n    this.inputAddValues = {};\n    this.inputUpdateValues = {};\n    makeObservable(this, {\n      inputAddValues: observable,\n      inputUpdateValues: observable,\n      getInputAddValues: action,\n      getInputUpdateValues: action,\n      createNewData: action,\n      deleteData: action,\n      updateData: action\n    });\n  }\n\n  async getInputAddValues(inputKey, inputValue) {\n    this.inputAddValues[inputKey] = inputValue;\n  }\n\n  async getInputUpdateValues(inputKey, inputValue) {\n    this.inputUpdateValues[inputKey] = inputValue;\n  }\n\n  createNewData(parentDoc, table) {\n    if (parentDoc !== undefined) {\n      parentDoc[`${table}ID`] = parentDoc.id;\n      delete parentDoc.id;\n\n      if (parentDoc.name === null) {\n        delete parentDoc.name;\n      }\n\n      let newDoc = Object.assign({}, this.inputAddValues, parentDoc);\n      this.services.addNewResource(newDoc, this.services.userToken);\n      this.inputAddValues = {};\n    } else {\n      if (Object.keys(this.inputAddValues).length !== 0) {\n        const data = this.inputAddValues;\n        this.services.addNewResource(data, this.services.userToken);\n        this.inputAddValues = {};\n      } else {\n        alert(\"Please fill in a input field!\");\n      }\n    }\n  }\n\n  deleteData(resource) {\n    const data = {\n      id: resource,\n      token: this.services.userToken\n    };\n    this.services.deleteExistingResource(data);\n  }\n\n  updateData(resource) {\n    const data = {\n      id: resource,\n      data: this.inputUpdateValues,\n      token: this.services.userToken\n    };\n    this.services.updateExistingResource(data);\n  }\n\n}\n\nexport default FormStore;","map":{"version":3,"sources":["E:/Mono-projekt/src/Store/Main Stores/FormStore.js"],"names":["makeObservable","observable","action","FormStore","constructor","inputAddValues","inputUpdateValues","getInputAddValues","getInputUpdateValues","createNewData","deleteData","updateData","inputKey","inputValue","parentDoc","table","undefined","id","name","newDoc","Object","assign","services","addNewResource","userToken","keys","length","data","alert","resource","token","deleteExistingResource","updateExistingResource"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,MAAMC,SAAN,CAAgB;AAGdC,EAAAA,WAAW,GAAG;AAAA,SAFdC,cAEc,GAFG,EAEH;AAAA,SADdC,iBACc,GADM,EACN;AACZN,IAAAA,cAAc,CAAC,IAAD,EAAO;AACnBK,MAAAA,cAAc,EAAEJ,UADG;AAEnBK,MAAAA,iBAAiB,EAAEL,UAFA;AAGnBM,MAAAA,iBAAiB,EAAEL,MAHA;AAInBM,MAAAA,oBAAoB,EAAEN,MAJH;AAKnBO,MAAAA,aAAa,EAAEP,MALI;AAMnBQ,MAAAA,UAAU,EAAER,MANO;AAOnBS,MAAAA,UAAU,EAAET;AAPO,KAAP,CAAd;AASD;;AACsB,QAAjBK,iBAAiB,CAACK,QAAD,EAAWC,UAAX,EAAuB;AAC5C,SAAKR,cAAL,CAAoBO,QAApB,IAAgCC,UAAhC;AACD;;AACyB,QAApBL,oBAAoB,CAACI,QAAD,EAAWC,UAAX,EAAuB;AAC/C,SAAKP,iBAAL,CAAuBM,QAAvB,IAAmCC,UAAnC;AACD;;AACDJ,EAAAA,aAAa,CAACK,SAAD,EAAYC,KAAZ,EAAmB;AAC9B,QAAID,SAAS,KAAKE,SAAlB,EAA6B;AAC3BF,MAAAA,SAAS,CAAE,GAAEC,KAAM,IAAV,CAAT,GAA0BD,SAAS,CAACG,EAApC;AACA,aAAOH,SAAS,CAACG,EAAjB;;AACA,UAAIH,SAAS,CAACI,IAAV,KAAmB,IAAvB,EAA6B;AAC3B,eAAOJ,SAAS,CAACI,IAAjB;AACD;;AACD,UAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhB,cAAvB,EAAuCS,SAAvC,CAAb;AACA,WAAKQ,QAAL,CAAcC,cAAd,CAA6BJ,MAA7B,EAAqC,KAAKG,QAAL,CAAcE,SAAnD;AACA,WAAKnB,cAAL,GAAsB,EAAtB;AACD,KATD,MASO;AACL,UAAIe,MAAM,CAACK,IAAP,CAAY,KAAKpB,cAAjB,EAAiCqB,MAAjC,KAA4C,CAAhD,EAAmD;AACjD,cAAMC,IAAI,GAAG,KAAKtB,cAAlB;AACA,aAAKiB,QAAL,CAAcC,cAAd,CAA6BI,IAA7B,EAAmC,KAAKL,QAAL,CAAcE,SAAjD;AACA,aAAKnB,cAAL,GAAsB,EAAtB;AACD,OAJD,MAIO;AACLuB,QAAAA,KAAK,CAAC,+BAAD,CAAL;AACD;AACF;AACF;;AACDlB,EAAAA,UAAU,CAACmB,QAAD,EAAW;AACnB,UAAMF,IAAI,GAAG;AAAEV,MAAAA,EAAE,EAAEY,QAAN;AAAgBC,MAAAA,KAAK,EAAE,KAAKR,QAAL,CAAcE;AAArC,KAAb;AACA,SAAKF,QAAL,CAAcS,sBAAd,CAAqCJ,IAArC;AACD;;AACDhB,EAAAA,UAAU,CAACkB,QAAD,EAAW;AACnB,UAAMF,IAAI,GAAG;AACXV,MAAAA,EAAE,EAAEY,QADO;AAEXF,MAAAA,IAAI,EAAE,KAAKrB,iBAFA;AAGXwB,MAAAA,KAAK,EAAE,KAAKR,QAAL,CAAcE;AAHV,KAAb;AAKA,SAAKF,QAAL,CAAcU,sBAAd,CAAqCL,IAArC;AACD;;AAnDa;;AAsDhB,eAAexB,SAAf","sourcesContent":["import { makeObservable, observable, action } from \"mobx\";\n\nclass FormStore {\n  inputAddValues = {};\n  inputUpdateValues = {};\n  constructor() {\n    makeObservable(this, {\n      inputAddValues: observable,\n      inputUpdateValues: observable,\n      getInputAddValues: action,\n      getInputUpdateValues: action,\n      createNewData: action,\n      deleteData: action,\n      updateData: action,\n    });\n  }\n  async getInputAddValues(inputKey, inputValue) {\n    this.inputAddValues[inputKey] = inputValue;\n  }\n  async getInputUpdateValues(inputKey, inputValue) {\n    this.inputUpdateValues[inputKey] = inputValue;\n  }\n  createNewData(parentDoc, table) {\n    if (parentDoc !== undefined) {\n      parentDoc[`${table}ID`] = parentDoc.id;\n      delete parentDoc.id;\n      if (parentDoc.name === null) {\n        delete parentDoc.name;\n      }\n      let newDoc = Object.assign({}, this.inputAddValues, parentDoc);\n      this.services.addNewResource(newDoc, this.services.userToken);\n      this.inputAddValues = {};\n    } else {\n      if (Object.keys(this.inputAddValues).length !== 0) {\n        const data = this.inputAddValues;\n        this.services.addNewResource(data, this.services.userToken);\n        this.inputAddValues = {};\n      } else {\n        alert(\"Please fill in a input field!\");\n      }\n    }\n  }\n  deleteData(resource) {\n    const data = { id: resource, token: this.services.userToken };\n    this.services.deleteExistingResource(data);\n  }\n  updateData(resource) {\n    const data = {\n      id: resource,\n      data: this.inputUpdateValues,\n      token: this.services.userToken,\n    };\n    this.services.updateExistingResource(data);\n  }\n}\n\nexport default FormStore;\n"]},"metadata":{},"sourceType":"module"}